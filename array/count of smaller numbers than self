class Solution {
public:
    void merge(vector<int> &count,vector<pair<int,int>> & v,int l,int mid,int r){
        vector<pair<int,int>>p(r-l+1);
        int i=l;
        int j=mid+1;
        int k=0;
        while(i<=mid && j<=r){
            if(v[i].first<=v[j].first){
                p[k++]=v[j++];
            }
            else{
                count[v[i].second]+=r-j+1;
                p[k++]=v[i++];
            }
        }
        while(i<=mid){
            p[k++]=v[i++];
        }
        while(j<=r){
            p[k++]=v[j++];
        }
        for(int i=l;i<=r;i++){
            v[i]=p[i-l];
        }
        return;
    }
    void mergesort(vector<int> &count,vector<pair<int,int>>&v,int l,int r){
        if(l>=r){
            return;
        }
        int mid=l+(r-l)/2;
        mergesort(count,v,l,mid);
        mergesort(count,v,mid+1,r);
        merge(count,v,l,mid,r);
        return;
    }
    vector<int> countSmaller(vector<int>& nums) {
        vector<pair<int,int>>v;
        for(int i=0;i<nums.size();i++){
            v.push_back({nums[i],i});
        }
        vector<int>count(nums.size(),0);
        mergesort(count,v,0,nums.size()-1);
        return count;
    }
};
